# Java logging configuration file 
# ===============================

# The intended log levels are as follows:
#
# OFF:     Nothing is logged.
# SEVERE:  Report only serious problems
# WARNING: Report all problems (e.g. any input dropped)
# INFO:    Summary level information
# CONFIG:  Also the configuration settings are logged.
# FINE:    Invalid input lines are reported individually.
# FINER:   The log size will be similar to the input size.
# FINEST:  The log will be several times bigger than the input.
# ALL:     Same as FINEST, but may include additional debug messages.
#
# The overall lowest log level for all handlers:
osmtopostgis.level = FINER

# Log handlers
handlers = java.util.logging.ConsoleHandler,java.util.logging.FileHandler

# The handler log level may further limit logging:
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.FileHandler.level = FINE

# Specifies the name of a Filter class to use (defaults to no Filter).
#java.util.logging.FileHandler.filter =

# Specifies the name of a Formatter class to use
java.util.logging.ConsoleHandler.formatter = conv.osm.postgis.LogFormatter
java.util.logging.FileHandler.formatter = conv.osm.postgis.LogDetailFormatter

# The name of the character set encoding to use
# (defaults to the default platform encoding).
# java.util.logging.FileHandler.encoding =

# Specifies an approximate maximum amount to write (in bytes) to any one file.
# If this is zero, then there is no limit. (Defaults to no limit).
# java.util.logging.FileHandler.limit =

# Specifies how many output files to cycle through (defaults to 1).
# java.util.logging.FileHandler.count =

# Specifies a pattern for generating the output file name.
# See the Java logging API for details. (Defaults to "%h/java%u.log").
java.util.logging.FileHandler.pattern = osmtopostgis.log

# Specifies whether the FileHandler should append onto any existing files
# (defaults to false).
# java.util.logging.FileHandler.append = true
